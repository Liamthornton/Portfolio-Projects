-- Loans with initial payment deferral --

DROP TABLE IF EXISTS covid_loans;
CREATE temp TABLE covid_loans as
SELECT la.loan_id,
       agreement_code
FROM oodledata.customer_dim c
JOIN oodledata_loans.loan_agreements la
    on la.main_borrower_account_id = c.account_id
where c.total_months_of_forbearance>=1;


-- Initial payment deferral start and end dates --

DROP TABLE IF EXISTS first_fb;
CREATE TEMP TABLE first_fb as (
    with fb_start as (
        SELECT cl.agreement_code,
               MIN(start_date::date) start_date
        FROM covid_loans as cl
        LEFT JOIN oodledata.forbearance as fb
            ON fb.agreement_code = cl.agreement_code
        WHERE fb.status in ('Agreed', 'Expired')
          and fb.booking_status in ('Completed', 'Reviewed')
          and type in ('Payment Holiday', 'Retrospective Payment Holiday')
          and fb.agreement_code = cl.agreement_code
        GROUP BY 1
        )
-- TABLE DEFINITION --
SELECT fbs.agreement_code,
       fbs.start_date as start_date,
       min(end_date::date) as end_date
FROM fb_start as fbs
LEFT JOIN oodledata.forbearance as fb
    ON fb.agreement_code = fbs.agreement_code
    and fb.start_date = fbs.start_date
GROUP BY 1,2);
select *
from first_fb;


-- Arrears Statuses --
DROP TABLE IF EXISTS arrears;
CREATE TEMP TABLE arrears as (
with pre_ph_arr as (
    SELECT cl.agreement_code,
           CASE
               WHEN arrears_status = 'Up-to-Date' then -1
               WHEN arrears_status = '0-Down' then 0
               WHEN arrears_status = '1-Down' then 1
               WHEN arrears_status = '2-Down' then 2
               WHEN arrears_status = '3-Down' then 3
               WHEN arrears_status = '4-Down' then 4
               WHEN arrears_status = '5+ Down' then 5
               ELSE null
               END as pre_arr
    FROM covid_loans as cl
             LEFT JOIN first_fb as ffb
                       ON ffb.agreement_code = cl.agreement_code
             LEFT JOIN oodledata_loans.loan_timeline as lt
                       ON lt.agreement_code = cl.agreement_code and lt.date = ffb.start_date
),
     june_onward_arr as (
    SELECT cl.agreement_code,
           date_part('month', lt.date) arr_month,
           CASE WHEN arrears_status = 'Up-to-Date' then -1
                WHEN arrears_status = '0-Down' then 0
                WHEN arrears_status = '1-Down' then 1
                WHEN arrears_status = '2-Down' then 2
                WHEN arrears_status = '3-Down' then 3
                WHEN arrears_status = '4-Down' then 4
                WHEN arrears_status = '5+ Down' then 5
           ELSE NULL
           END as arr_status
    FROM covid_loans as cl
    LEFT JOIN oodledata_loans.loan_timeline as lt
        ON lt.agreement_code = cl.agreement_code
    WHERE date IN (
        SELECT last_day(lt.date)
        FROM oodledata_loans.loan_timeline as lt
        WHERE lt.date between '2020-06-30' and '2020-11-30'
        )
    GROUP BY 1,2,3
),
     post_ph_arr as (
    SELECT agreement_code,
           SUM(case when arr_month = 6 then arr_status END) as jun_arr,
           SUM(case when arr_month = 7 then arr_status END) as jul_arr,
           SUM(case when arr_month = 8 then arr_status END) as aug_arr,
           SUM(case when arr_month = 9 then arr_status END) as sep_arr,
           SUM(case when arr_month = 10 then arr_status END) as oct_arr,
           SUM(case when arr_month = 11 then arr_status END) as nov_arr
    FROM june_onward_arr as joa
    GROUP BY 1
)
-- TABLE DEFINITION --
SELECT bph.agreement_code,
       pre_arr,
       jun_arr,
       jul_arr,
       aug_arr,
       sep_arr,
       oct_arr,
       nov_arr
FROM covid_loans as cl
LEFT JOIN pre_ph_arr as bph
    ON bph.agreement_code = cl.agreement_code
LEFT JOIN post_ph_arr as aph
    ON aph.agreement_code = cl.agreement_code);


-- Loans with payment holiday extension --

DROP TABLE IF EXISTS add_ph;
CREATE TEMP TABLE add_ph as (
with add_ph_start as (
    SELECT cl.agreement_code,
           min(fb.start_date) as add_ph_start_date
    FROM covid_loans as cl
    LEFT JOIN oodledata.forbearance as fb
        ON cl.agreement_code = fb.agreement_code
    LEFT JOIN first_fb as ffb
        ON ffb.agreement_code = fb.agreement_code
    WHERE type = 'Additional Payment Holiday'
    GROUP BY 1
)
-- Table Definition --
SELECT add.agreement_code,
       add_ph_start_date,
       min(fb.end_date) as add_ph_end_date
FROM add_ph_start as add
LEFT JOIN oodledata.forbearance as fb
    ON add.agreement_code = fb.agreement_code
    and add.add_ph_start_date = fb.start_date
    and fb.type = 'Additional Payment Holiday'
GROUP BY 1,2);
SELECT *
FROM add_ph;


-- Settlements and Defaults --

DROP TABLE IF EXISTS sets_defs;
CREATE TEMP TABLE sets_defs as (
    with cases as (
        SELECT cl.agreement_code,
               type,
               MIN(date) as sd_date
        FROM covid_loans as cl
        LEFT JOIN oodledata_loans.settlements_and_defaults as sd
            ON sd.agreement_code = cl.agreement_code
        WHERE type IN ('VT - Default', 'Default', 'VT', 'Settlement')
        GROUP BY 1, 2
    )
    SELECT cases.agreement_code,
           type,
           sd_date,
           capital_balance as sd_balance
    FROM cases
    LEFT JOIN oodledata_loans.loan_timeline as lt
        ON lt.agreement_code = cases.agreement_code and lt.date = date_add('days',-1, cases.sd_date)
);
SELECT *
FROM sets_defs;


-- Balances for S&D --

DROP TABLE IF EXISTS balances;
CREATE TEMP TABLE balances as (
with balances as (
    SELECT agreement_code,
           date_part('month',date) as month,
           capital_balance
    FROM oodledata_loans.loan_timeline
    WHERE date IN (
                   SELECT last_day(date)
                   FROM oodledata_loans.loan_timeline
                   WHERE date BETWEEN '2020-06-30' AND '2020-11-30'
                  )
    AND agreement_code IN (
                   SELECT agreement_code
                   FROM covid_loans
                   )
)
SELECT agreement_code,
       sum(CASE WHEN month = 6 THEN capital_balance END) as jun_bal,
       sum(CASE WHEN month = 7 THEN capital_balance END) as jul_bal,
       sum(CASE WHEN month = 8 THEN capital_balance END) as aug_bal,
       sum(CASE WHEN month = 9 THEN capital_balance END) as sept_bal,
       sum(CASE WHEN month = 10 THEN capital_balance END) as oct_bal,
       sum(CASE WHEN month = 11 THEN capital_balance END) as nov_bal
FROM balances as bal
GROUP BY 1);

-- Final Table Definition --
DROP TABLE IF EXISTS PBL;
CREATE TEMP TABLE PBL as (
    SELECT cl.agreement_code,
           ffb.start_date,
           ffb.end_date,
           arr.pre_arr,
           arr.jun_arr,
           arr.jul_arr,
           arr.aug_arr,
           arr.sep_arr,
           arr.oct_arr,
           arr.nov_arr,
           add.add_ph_start_date,
           add.add_ph_end_date,
           sd.type,
           sd.sd_date,
           sd.sd_balance,
           bal.jun_bal,
           bal.jul_bal,
           bal.aug_bal,
           bal.sept_bal,
           bal.oct_bal,
           bal.nov_bal
    FROM covid_loans as cl
        LEFT JOIN first_fb as ffb
            ON ffb.agreement_code = cl.agreement_code
        LEFT JOIN arrears as arr
            ON arr.agreement_code = cl.agreement_code
        LEFT JOIN add_ph as add
            ON add.agreement_code = cl.agreement_code
        LEFT JOIN sets_defs as sd
            ON sd.agreement_code = cl.agreement_code
        LEFT JOIN balances as bal
            ON bal.agreement_code = cl.agreement_code
);
SELECT count(*)
FROM pbl;


-- MONTHLY REPORT --
SELECT SUM(case when start_date <= '2020-11-30' THEN 1 ELSE 0 END)             as vol_ph,
       SUM(case when start_date <= '2020-11-30' THEN jul_bal ELSE 0 END)       as val_ph,
       SUM(case when start_date <= '2020-11-30' AND
                     end_date > '2020-11-30' AND
                     (sd_date > '2020-11-30' or sd_date IS NULL)
                THEN 1
                ELSE 0
           END)                                                               as vol_first_ph,
       SUM(case when start_date <= '2020-11-30' AND
                     end_date > '2020-11-30' AND
                     (sd_date > '2020-11-30' or sd_date IS NULL)
                THEN nov_bal
                ELSE 0
           END)                                                               as val_first_ph,
       SUM(case when add_ph_start_date is not null AND
                     add_ph_start_date <= '2020-11-30' AND
                     add_ph_end_date > '2020-11-30' AND
                     end_date < '2020-11-30'
                THEN 1
                ELSE 0
           END)                                                               as vol_ext_ph,
       SUM(case when add_ph_start_date is not null AND
                     add_ph_start_date <= '2020-11-30' AND
                     add_ph_end_date > '2020-11-30' AND
                     end_date < '2020-11-30'
                THEN nov_bal
                ELSE 0
           END)                                                               as val_ext_ph,
       SUM(case when end_date < '2020-11-30' AND
--                      (add_ph_start_date is NULL OR add_ph_end_date < '2020-06-30') AND
                     (sd_date is NULL or sd_date > '2020-11-30') AND
                     pre_arr >= nov_arr
                THEN 1
                ELSE 0
           END)                                                               AS vol_perf,
       SUM(case when end_date < '2020-11-30' AND
--                      (add_ph_start_date IS NULL or add_ph_end_date < '2020-06-30') AND
                     (sd_date is NULL or sd_date > '2020-11-30') AND
                     pre_arr >= nov_arr
                THEN nov_bal
                ELSE 0
           END)                                                               AS val_perf,
       SUM(case when end_date < '2020-11-30' AND
--                      (add_ph_start_date IS NULL or add_ph_end_date < '2020-06-30') AND
                     (sd_date is NULL or sd_date > '2020-11-30') AND
                     pre_arr < nov_arr
                THEN 1
                ELSE 0
           END)                                                               AS vol_notperf,
       SUM(case when end_date < '2020-11-30' AND
--                      (add_ph_start_date IS NULL or add_ph_end_date < '2020-06-30') AND
                     (sd_date is NULL or sd_date > '2020-11-30') AND
                     pre_arr < nov_arr
                THEN nov_bal
                ELSE 0
           END)                                                               AS val_notperf,
       SUM(case when type IN ('Default', 'VT - Default', 'VT') AND
                     sd_date < '2020-11-30'
                THEN 1
                ELSE 0
           END)                                                               AS  vol_def,
       SUM(case when type IN ('Default', 'VT - Default', 'VT') AND
                     sd_date < '2020-11-30'
                THEN sd_balance
                ELSE 0
           END)                                                               AS  val_def,
       SUM(case when type = 'Settlement' AND
                     sd_date < '2020-11-30'
                THEN 1
                ELSE 0
           END)                                                               AS vol_set,
       SUM(case when type = 'Settlement' AND
                     sd_date < '2020-11-30'
                THEN sd_balance
                ELSE 0
           END)                                                               AS val_set
FROM PBL;
